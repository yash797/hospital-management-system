package com.hsbc.hospitalb.dao.impl;
// Generated by CodiumAI

import com.hsbc.hospitalb.DAO.DoctorDAOImpl;

import com.hsbc.hospitalb.models.Appointment;
import com.hsbc.hospitalb.models.Prescription;
import com.hsbc.hospitalb.models.Schedule;
import org.junit.Test;
import org.junit.jupiter.api.Assertions;
import org.mockito.Mockito;

import java.sql.*;
import java.util.List;
import java.util.Properties;

import static org.junit.Assert.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

public class DoctorDAOImplTest {


    // updateSchedule updates the schedule in the database correctly
    @Test
    public void test_update_schedule_success() throws SQLException {
        // Arrange
        Connection mockConnection = mock(Connection.class);
        PreparedStatement mockStatement = mock(PreparedStatement.class);
        Properties mockProperties = mock(Properties.class);
        DoctorDAOImpl doctorDAO = new DoctorDAOImpl(mockConnection);
        Schedule schedule = new Schedule(1, 1, Date.valueOf("2024-08-25"), Time.valueOf("09:00:00"), Time.valueOf("17:00:00"), true);

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockStatement);
        when(mockProperties.getProperty("updateSchedule")).thenReturn("UPDATE schedule SET date=?, start_time=?, end_time=?, availability=? WHERE doctor_id=?");

        // Act
        doctorDAO.updateSchedule(schedule);

        // Assert
        verify(mockStatement).setDate(1, new java.sql.Date(schedule.getDate().getTime()));
        verify(mockStatement).setTime(2, schedule.getStartTime());
        verify(mockStatement).setTime(3, schedule.getEndTime());
        verify(mockStatement).setBoolean(4, schedule.isAvailability());
        verify(mockStatement).setInt(5, schedule.getDoctorId());
        verify(mockStatement).executeUpdate();
    }

    // updateSchedule handles null schedule input gracefully
    @Test
    public void test_update_schedule_null_input() {
        // Arrange
        Connection mockConnection = mock(Connection.class);
        DoctorDAOImpl doctorDAO = new DoctorDAOImpl(mockConnection);

        // Act & Assert
        Assertions.assertThrows(NullPointerException.class, () -> {
            doctorDAO.updateSchedule(null);
        });
    }
    @Test
    public void test_retrieves_appointments_for_given_doctor_id() throws SQLException {
        Connection mockConnection = mock(Connection.class);
        PreparedStatement mockStatement = mock(PreparedStatement.class);
        ResultSet mockResultSet = mock(ResultSet.class);
        Properties mockProperties = mock(Properties.class);

        DoctorDAOImpl doctorDAO = new DoctorDAOImpl(mockConnection);
        doctorDAO.sqlQueries = mockProperties;

        when(mockProperties.getProperty("getAppointmentsByDoctorId")).thenReturn("SELECT * FROM appointments WHERE doctor_id = ?");
        try {
            when(mockConnection.prepareStatement(anyString())).thenReturn(mockStatement);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        try {
            when(mockStatement.executeQuery()).thenReturn(mockResultSet);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        try {
            when(mockResultSet.next()).thenReturn(true).thenReturn(false);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        try {
            when(mockResultSet.getInt("appointment_id")).thenReturn(1);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        when(mockResultSet.getInt("doctor_id")).thenReturn(123);
        when(mockResultSet.getInt("patient_id")).thenReturn(456);
        when(mockResultSet.getDate("appointment_date")).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(mockResultSet.getTime("appointment_time")).thenReturn(new java.sql.Time(System.currentTimeMillis()));
        when(mockResultSet.getBoolean("status")).thenReturn(true);

        List<Appointment> appointments = doctorDAO.getAppointmentsByDoctorId(123);

        Assertions.assertNotNull(appointments);
        Assertions.assertEquals(1, appointments.size());
        Assertions.assertEquals(123, appointments.get(0).getDoctorId());
    }
    @Test
    public void test_doctor_id_does_not_exist() throws SQLException {
        Connection mockConnection = mock(Connection.class);
        PreparedStatement mockStatement = mock(PreparedStatement.class);
        ResultSet mockResultSet = mock(ResultSet.class);
        Properties mockProperties = mock(Properties.class);

        DoctorDAOImpl doctorDAO = new DoctorDAOImpl(mockConnection);
        doctorDAO.sqlQueries = mockProperties;

        when(mockProperties.getProperty("getAppointmentsByDoctorId")).thenReturn("SELECT * FROM appointments WHERE doctor_id = ?");
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockStatement);
        when(mockStatement.executeQuery()).thenReturn(mockResultSet);

        when(mockResultSet.next()).thenReturn(false);

        List<Appointment> appointments = doctorDAO.getAppointmentsByDoctorId(999);

        Assertions.assertNotNull(appointments);
        Assertions.assertTrue(appointments.isEmpty());
    }
    @Test
    public void test_retrieves_appointment_by_valid_id() throws SQLException {
        Connection mockConnection = mock(Connection.class);
        PreparedStatement mockStatement = mock(PreparedStatement.class);
        ResultSet mockResultSet = mock(ResultSet.class);
        Properties mockProperties = mock(Properties.class);

        DoctorDAOImpl doctorDAO = new DoctorDAOImpl(mockConnection);
        doctorDAO.sqlQueries = mockProperties;

        when(mockProperties.getProperty("getAppointmentById")).thenReturn("SELECT * FROM appointments WHERE appointment_id = ?");
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockStatement);
        when(mockStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true);
        when(mockResultSet.getInt("appointment_id")).thenReturn(1);
        when(mockResultSet.getInt("doctor_id")).thenReturn(101);
        when(mockResultSet.getInt("patient_id")).thenReturn(202);
        when(mockResultSet.getDate("appointment_date")).thenReturn(new java.sql.Date(System.currentTimeMillis()));
        when(mockResultSet.getTime("appointment_time")).thenReturn(new java.sql.Time(System.currentTimeMillis()));
        when(mockResultSet.getBoolean("status")).thenReturn(true);

        Appointment appointment = doctorDAO.getAppointmentById(1);

        Assertions.assertNotNull(appointment);
        Assertions.assertEquals(1, appointment.getAppointmentId());
        Assertions.assertEquals(101, appointment.getDoctorId());
        Assertions.assertEquals(202, appointment.getPatientId());
    }
    @Test
    public void test_appointment_id_does_not_exist() throws SQLException {
        Connection mockConnection = mock(Connection.class);
        PreparedStatement mockStatement = mock(PreparedStatement.class);
        ResultSet mockResultSet = mock(ResultSet.class);
        Properties mockProperties = mock(Properties.class);

        DoctorDAOImpl doctorDAO = new DoctorDAOImpl(mockConnection);
        doctorDAO.sqlQueries = mockProperties;

        when(mockProperties.getProperty("getAppointmentById")).thenReturn("SELECT * FROM appointments WHERE appointment_id = ?");
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockStatement);
        when(mockStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(false);

        Appointment appointment = doctorDAO.getAppointmentById(999);

        Assertions.assertNull(appointment);
    }
    @Test
    public void test_update_appointment_with_valid_data() throws SQLException {
        Connection mockConnection = mock(Connection.class);
        PreparedStatement mockStatement = mock(PreparedStatement.class);
        Properties mockProperties = mock(Properties.class);

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockStatement);
        when(mockProperties.getProperty("updateAppointment")).thenReturn("UPDATE appointments SET appointment_date=?, appointment_time=?, status=? WHERE appointment_id=?");

        DoctorDAOImpl doctorDAO = new DoctorDAOImpl(mockConnection);
        doctorDAO.sqlQueries = mockProperties;

        Appointment appointment = new Appointment(1, 2, 3, new java.sql.Date(System.currentTimeMillis()), new Time(System.currentTimeMillis()), true);
        doctorDAO.updateAppointment(appointment);

        verify(mockStatement).setDate(1, new java.sql.Date(appointment.getAppointmentDate().getTime()));
        verify(mockStatement).setTime(2, appointment.getAppointmentTime());
        verify(mockStatement).setBoolean(3, appointment.isStatus());
        verify(mockStatement).setInt(4, appointment.getAppointmentId());
        verify(mockStatement).executeUpdate();
    }
    @Test
    public void test_update_appointment_with_null_values() throws SQLException {
        Connection mockConnection = mock(Connection.class);
        PreparedStatement mockStatement = mock(PreparedStatement.class);
        Properties mockProperties = mock(Properties.class);

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockStatement);
        when(mockProperties.getProperty("updateAppointment")).thenReturn("UPDATE appointments SET appointment_date=?, appointment_time=?, status=? WHERE appointment_id=?");

        DoctorDAOImpl doctorDAO = new DoctorDAOImpl(mockConnection);
        doctorDAO.sqlQueries = mockProperties;

        Appointment appointment = new Appointment(1, 2, 3, null, null, false);

        doctorDAO.updateAppointment(appointment);

        verify(mockStatement).setDate(1, null);
        verify(mockStatement).setTime(2, null);
        verify(mockStatement).setBoolean(3, appointment.isStatus());
        verify(mockStatement).setInt(4, appointment.getAppointmentId());
        verify(mockStatement).executeUpdate();
    }
    @Test
    public void test_create_prescription_success() throws SQLException {
        Connection mockConnection = mock(Connection.class);
        PreparedStatement mockStatement = mock(PreparedStatement.class);
        Properties mockProperties = mock(Properties.class);

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockStatement);
        when(mockProperties.getProperty("createPrescription")).thenReturn("INSERT INTO prescriptions (frequency, days, patient_id, doctor_id, medicine_id) VALUES (?, ?, ?, ?, ?)");

        DoctorDAOImpl doctorDAO = new DoctorDAOImpl(mockConnection);
        doctorDAO.sqlQueries = mockProperties;

        Prescription prescription = new Prescription(3, 7, 1, 2, 5);

        doctorDAO.createPrescription(prescription);

        verify(mockStatement).setInt(1, 3);
        verify(mockStatement).setInt(2, 7);
        verify(mockStatement).setInt(3, 1);
        verify(mockStatement).setInt(4, 2);
        verify(mockStatement).setInt(5, 5);
        verify(mockStatement).executeUpdate();
    }

}