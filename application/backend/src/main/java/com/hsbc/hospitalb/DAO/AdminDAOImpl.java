package com.hsbc.hospitalb.DAO;
import com.hsbc.hospitalb.DAO.AdminDAO;
import com.hsbc.hospitalb.models.*;
import com.hsbc.hospitalb.utils.DatabaseConnection;

import java.io.IOException;
import java.io.InputStream;
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class AdminDAOImpl implements AdminDAO {
    public Connection connection;
    public Properties sqlQueries;

    public AdminDAOImpl() throws SQLException {
        sqlQueries = new Properties();
        try (InputStream is = getClass().getClassLoader().getResourceAsStream("sql.application.properties")) {
            sqlQueries.load(is);
        } catch (IOException e) {
            e.printStackTrace();
        }
        this.connection = DatabaseConnection.getConnection();
    }

    @Override
    public Admin getAdminById(long adminId) {
        String query = sqlQueries.getProperty("getAdminById");
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setLong(1, adminId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new Admin(rs.getLong("admin_id"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }


    @Override
    public void registerDoctor(Doctor doctor) {
        String personQuery = sqlQueries.getProperty("insertPerson");
        String doctorQuery = sqlQueries.getProperty("registerDoctor");

        try (PreparedStatement personStmt = connection.prepareStatement(personQuery, Statement.RETURN_GENERATED_KEYS);
             PreparedStatement doctorStmt = connection.prepareStatement(doctorQuery)) {

            // Insert into Person table
            personStmt.setLong(1, doctor.getPersonId()); // Assuming personId is generated by the database
            personStmt.setString(2, doctor.getFullName().toString()); // Assuming FullName is converted to String
            personStmt.setDate(3, Date.valueOf(doctor.getDob()));
            personStmt.setLong(4, doctor.getPhoneNumber());
            personStmt.setString(5, doctor.getAddress());
            personStmt.setString(6, doctor.getPassword());
            personStmt.setString(7, doctor.getGender().name());

            personStmt.executeUpdate();

            // Retrieve generated personId if not already set
            if (doctor.getPersonId() == 0) {
                try (ResultSet generatedKeys = personStmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        doctor.setPersonId(generatedKeys.getLong(1));
                    }
                }
            }

            // Insert into Doctor table
            doctorStmt.setInt(1, doctor.getDoctorId());
            doctorStmt.setLong(2, doctor.getPersonId());
            doctorStmt.setString(3, doctor.getSpecialization());
            doctorStmt.setString(4, doctor.getQualification());

            doctorStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    @Override
    public List<Doctor> getAllDoctors() {
        List<Doctor> doctors = new ArrayList<>();
        String query = sqlQueries.getProperty("getAllDoctors");;
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                Doctor doctor = new Doctor(
                        rs.getInt("doctorId"),
                        rs.getInt("personId"),
                        rs.getString("specialization"),
                        rs.getString("qualification"),
                        getSchedulesByDoctorId(rs.getInt("doctorId"))
                );
                doctors.add(doctor);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return doctors;
    }

    @Override
    public void updateDoctor(Doctor doctor) {
        String query = sqlQueries.getProperty("updateDoctor");
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, doctor.getSpecialization());
            stmt.setString(2, doctor.getQualification());
            stmt.setLong(3, doctor.getDoctorId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void deleteDoctor(long doctorId) {
        String query = sqlQueries.getProperty("deleteDoctor");
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setLong(1, doctorId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<Patient> getAllPatients() {
        List<Patient> patients = new ArrayList<>();
        String query = sqlQueries.getProperty("getAllPatients");
        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {
            while (rs.next()) {
                Patient patient = new Patient(
                        rs.getLong("patient_id"),
                        getPersonById(rs.getLong("person_id")),
                        rs.getString("disease"),
                        getStaffById(rs.getLong("added_by"))
                );
                patients.add(patient);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return patients;
    }

    @Override
    public void cancelAppointment(int appointmentId) {
        String query = sqlQueries.getProperty("cancelAppointment");
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, appointmentId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<Appointment> getAppointmentsByDoctorId(long doctorId) {
        List<Appointment> appointments = new ArrayList<>();
        String query = sqlQueries.getProperty("getAppointmentByDoctorId");;
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setLong(1, doctorId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Appointment appointment = new Appointment(
                        rs.getInt("appointment_id"),
                        rs.getInt("patient_id"),
                        rs.getInt("doctorId"),
                        rs.getDate("appointment_date"),
                        rs.getTime("appointment_time"),
                        rs.getBoolean("status")
                );
                appointments.add(appointment);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return appointments;
    }

    @Override
    public void updateAppointment(Appointment appointment) {
        String query = sqlQueries.getProperty("updateAppointment");;
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setDate(1, Date.valueOf(String.valueOf(appointment.getAppointmentDate())));
            stmt.setTime(2, Time.valueOf(appointment.getAppointmentTime().toLocalTime()));
            stmt.setBoolean(3, appointment.isStatus());
            stmt.setLong(4, appointment.getAppointmentId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }



    @Override
    public List<Appointment> getAppointmentsByDate(LocalDate date) {
        List<Appointment> appointments = new ArrayList<>();
        String query = sqlQueries.getProperty("getAppointmentsByDate");
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setDate(1, Date.valueOf(date));
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Appointment appointment = new Appointment(
                        rs.getInt("appointment_id"),
                        rs.getInt("patient_id"),
                        rs.getInt("doctorId"),
                        rs.getDate("appointment_date"),
                        rs.getTime("appointment_time"),
                        rs.getBoolean("status")
                );
                appointments.add(appointment);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return appointments;
    }

    @Override
    public List<Patient> getPatientsByDoctorId(long doctorId) {
        List<Patient> patients = new ArrayList<>();
        String query = sqlQueries.getProperty("getPatientsByDoctorId");
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setLong(1, doctorId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Patient patient = new Patient(
                        rs.getLong("patient_id"),
                        getPersonById(rs.getLong("person_id")),
                        rs.getString("disease"),
                        getStaffById(rs.getLong("added_by"))
                );
                patients.add(patient);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return patients;
    }

    @Override
    public List<Doctor> getDoctorsBySpecialization(String specialization) {
        List<Doctor> doctors = new ArrayList<>();
        String query = sqlQueries.getProperty("getDoctorsBySpecialization");;
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, specialization);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Doctor doctor = new Doctor(
                        rs.getInt("doctor_id"),
                        rs.getInt("person_id"),
                        rs.getString("specialization"),
                        rs.getString("qualification"),
                        getSchedulesByDoctorId(rs.getLong("doctor_id"))
                );
                doctors.add(doctor);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return doctors;
    }

    public Person getPersonById(long personId) {
        String query = sqlQueries.getProperty("getPersonById");
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setLong(1, personId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new Person(
                        rs.getLong("person_id"),
                        new FullName(rs.getLong("full_name_id"), rs.getString("first_name"), rs.getString("last_name"), rs.getString("middle_name")),
                        rs.getDate("dob").toLocalDate(),
                        rs.getLong("phone_number"),
                        Gender.valueOf(rs.getString("gender")),
                        rs.getString("address"),
                        rs.getString("password")
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }


    public Staff getStaffById(long staffId) {
        String query = sqlQueries.getProperty("getStaffById");
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setLong(1, staffId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new Staff(rs.getLong("staff_id"), getPersonById(rs.getLong("person_id")));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public void updateAppointmentByDate(LocalDate appointmentDate, Appointment updatedAppointment) {
        String query = sqlQueries.getProperty("updateAppointmentByDate");
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setLong(1, updatedAppointment.getPatientId()); // Patient ID
            stmt.setLong(2, updatedAppointment.getDoctorId()); // Doctor ID
            stmt.setTime(3, Time.valueOf(updatedAppointment.getAppointmentTime().toLocalTime())); // Appointment time
            stmt.setBoolean(4, updatedAppointment.isStatus()); // Status (assuming it's a boolean)
            stmt.setDate(5, Date.valueOf(appointmentDate)); // Appointment date
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }



    // Cancels appointments using the appointment date
    public void cancelAppointmentByDate(LocalDate appointmentDate, int appointmentId) {
        String query = sqlQueries.getProperty("cancelAppointmentByDate");
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, appointmentId);
            stmt.setDate(2, Date.valueOf(appointmentDate));
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    public Doctor getDoctorById(long doctorId) {
        String query = sqlQueries.getProperty("getDoctorById");
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setLong(1, doctorId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new Doctor(
                        rs.getInt("doctor_id"), // Doctor ID
                        rs.getInt("person_id"),
                        rs.getString("specialization"),
                        rs.getString("qualification"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }



    public List<Schedule> getSchedulesByDoctorId(long doctorId) {
        List<Schedule> schedules = new ArrayList<>();
        String query = sqlQueries.getProperty("getSchedulesByDoctorId");
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setLong(1, doctorId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Schedule schedule = new Schedule(
                        rs.getLong("schedule_id"),
                        getDoctorById(doctorId),
                        rs.getString("day_of_week"),
                        rs.getTime("start_time").toLocalTime(),
                        rs.getTime("end_time").toLocalTime()
                );
                schedules.add(schedule);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return schedules;
    }

    private Patient getPatientById(long patientId) {
        String query = sqlQueries.getProperty("getPatientById");
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setLong(1, patientId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new Patient(
                        rs.getLong("patient_id"),
                        getPersonById(rs.getLong("person_id")),
                        rs.getString("disease"),
                        getStaffById(rs.getLong("added_by"))
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
}
